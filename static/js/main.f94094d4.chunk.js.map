{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","getUser","userId","fetch","then","response","json","TodoList","state","currentTodos","query","status","handleChange","event","setState","target","value","filterTodos","todos","filter","todo","title","toLowerCase","includes","arr","completed","filteredTodos","this","className","type","placeholder","onChange","disabled","selected","hidden","map","readOnly","onClick","props","selectUser","checked","React","Component","CurrentUser","userName","email","phone","changeUser","selectedUserId","user","name","previousProps","resetUser","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f94094d4.chunk.js","sourcesContent":["const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUser = (userId: number) => {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport { getTodos } from '../../api';\n\ntype State = {\n  currentTodos: Todo[];\n  query: string;\n  status: Status | string;\n};\n\ntype Props = {\n  selectUser: (userId: number) => void;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    currentTodos: [],\n    query: '',\n    status: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos: Todo[]) => {\n        this.setState({\n          currentTodos: todos,\n        });\n      });\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ status: event.target.value });\n  };\n\n  filterTodos = () => {\n    let todos = [...this.state.currentTodos];\n\n    todos = todos.filter(todo => todo.title.toLowerCase().includes(this.state.query.toLowerCase()));\n\n    if (this.state.status === 'Active') {\n      return todos.filter(arr => arr.completed === false);\n    }\n\n    if (this.state.status === 'Completed') {\n      return todos.filter(arr => arr.completed === true);\n    }\n\n    return todos;\n  };\n\n  render() {\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            value={this.state.query}\n            placeholder=\"Search..\"\n            className=\"input input-group\"\n            onChange={(event) => {\n              this.setState({\n                query: event.target.value,\n              });\n            }}\n          />\n          <select className=\"select form-select\" onChange={this.handleChange}>\n            <option value=\"\" disabled selected hidden>Choose status</option>\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              todo.completed\n                ? (\n                  <li className=\"TodoList__item TodoList__item--unchecked\">\n                    <label>\n                      <input type=\"checkbox\" readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className=\"\n                        TodoList__user-button\n                        TodoList__user-button--selected\n                        button\n                      \"\n                      type=\"button\"\n                      onClick={() => this.props.selectUser(todo.userId)}\n                    >\n                      User&nbsp;\n                      {todo.userId}\n                    </button>\n                  </li>\n                )\n\n                : (\n                  <li className=\"TodoList__item TodoList__item--checked\">\n                    <label>\n                      <input type=\"checkbox\" checked readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className=\"TodoList__user-button button\"\n                      type=\"button\"\n                      onClick={() => this.props.selectUser(todo.userId)}\n                    >\n                      User&nbsp;\n                      {todo.userId}\n                    </button>\n                  </li>\n                )\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype State = {\n  userName: string;\n  email: string;\n  phone: string;\n};\n\ntype Props = {\n  selectedUserId: number;\n  resetUser: () => void;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    userName: '',\n    email: '',\n    phone: '',\n  };\n\n  componentDidMount() {\n    this.changeUser();\n  }\n\n  componentDidUpdate(previousProps: Props) {\n    if (previousProps.selectedUserId !== this.props.selectedUserId) {\n      this.changeUser();\n    }\n  }\n\n  changeUser = () => {\n    getUser(this.props.selectedUserId)\n      .then(user => {\n        this.setState({\n          userName: user.name,\n          email: user.email,\n          phone: user.phone,\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\"><span>{this.props.selectedUserId}</span></h2>\n\n          <h3 className=\"CurrentUser__name\">{this.state.userName}</h3>\n          <p className=\"CurrentUser__email\">{this.state.email}</p>\n          <p className=\"CurrentUser__phone\">{this.state.phone}</p>\n        </div>\n        <button\n          type=\"button\"\n          onClick={() => this.props.resetUser()}\n          className=\"btn btn-outline-danger button--reset\"\n        >\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  resetUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={this.state.selectedUserId}\n                resetUser={this.resetUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}